"use client";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Loader2 } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface SampleEssayGeneratorProps {
  userEssay: string | null;
  taskDescription: string;
}

export default function SampleEssayGenerator({
  userEssay,
  taskDescription,
}: SampleEssayGeneratorProps) {
  const [targetBand, setTargetBand] = useState<string>("7.0");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedEssay, setGeneratedEssay] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleGenerateSample = async () => {
    if (!userEssay) return;

    setIsGenerating(true);
    setError(null);

    try {
      // This would be an actual API call in production
      // For demo purposes, we'll simulate a delay and response
      await new Promise((resolve) => setTimeout(resolve, 3000));

      // Simulate API response
      const sampleEssay = generateMockSampleEssay(
        userEssay,
        targetBand,
        taskDescription
      );
      setGeneratedEssay(sampleEssay);
    } catch (err) {
      setError("Failed to generate sample essay. Please try again later.");
      console.error(err);
    } finally {
      setIsGenerating(false);
    }
  };

  // This is just for demo purposes - in production, this would come from the backend
  const generateMockSampleEssay = (
    userEssay: string,
    targetBand: string,
    taskDescription: string
  ): string => {
    // In a real implementation, this would be generated by the backend
    return `The graph illustrates the consumption patterns of renewable energy in the United States from 1949 to 2008, measured in quadrillion BTU.

Overall, there was a significant upward trend in total renewable energy consumption over the 60-year period, with hydroelectric power dominating as the primary source until the early 2000s, when other sources began to diversify the renewable energy portfolio.

In 1949, total renewable energy consumption stood at approximately 3 quadrillion BTU, with hydroelectric power accounting for roughly two-thirds of this amount at 2 quadrillion BTU, while wood provided the remaining one-third at around 1 quadrillion BTU. Between 1949 and 1970, there was a gradual increase in total consumption, reaching approximately 4 quadrillion BTU by 1970.

The period from 1970 to 1990 saw more substantial growth, with total renewable energy consumption peaking at about 6 quadrillion BTU in the mid-1980s before experiencing slight fluctuations. Notably, hydroelectric power remained relatively stable between 2-3 quadrillion BTU throughout this period, while wood consumption showed modest growth.

From 1990 onwards, the renewable energy landscape began to diversify significantly. While hydroelectric power and wood remained important contributors, wind energy and biofuels emerged as increasingly relevant sources, particularly after 2000. By 2008, total renewable energy consumption had reached its highest point at nearly 7 quadrillion BTU, with wind energy showing particularly rapid growth in the final years of the period.

This diversification reflects the United States' evolving approach to renewable energy, moving from heavy reliance on conventional sources like hydroelectric power toward a more balanced portfolio that incorporates newer technologies.`;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Sample Essay Generator</CardTitle>
        <CardDescription>
          Generate a sample essay based on your current submission to see how to
          improve your writing to reach a higher band score.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex items-center gap-4">
            <div className="w-full max-w-xs">
              <label
                htmlFor="target-band"
                className="block text-sm font-medium mb-2"
              >
                Target Band Score
              </label>
              <Select
                value={targetBand}
                onValueChange={setTargetBand}
                disabled={isGenerating || !userEssay}
              >
                <SelectTrigger id="target-band">
                  <SelectValue placeholder="Select target band" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="6.0">Band 6.0</SelectItem>
                  <SelectItem value="6.5">Band 6.5</SelectItem>
                  <SelectItem value="7.0">Band 7.0</SelectItem>
                  <SelectItem value="7.5">Band 7.5</SelectItem>
                  <SelectItem value="8.0">Band 8.0</SelectItem>
                  <SelectItem value="8.5">Band 8.5</SelectItem>
                  <SelectItem value="9.0">Band 9.0</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <Button
              onClick={handleGenerateSample}
              disabled={isGenerating || !userEssay}
              className="mt-6"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />{" "}
                  Generating...
                </>
              ) : (
                "Generate Sample Essay"
              )}
            </Button>
          </div>

          {!userEssay && (
            <Alert variant="destructive" className="mt-4">
              <AlertDescription>
                You need to submit your essay first before generating a sample
                essay.
              </AlertDescription>
            </Alert>
          )}

          {error && (
            <Alert variant="destructive" className="mt-4">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {generatedEssay && (
            <div className="mt-6">
              <Tabs defaultValue="sample">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="sample">
                    Sample Essay (Band {targetBand})
                  </TabsTrigger>
                  <TabsTrigger value="comparison">
                    Side-by-Side Comparison
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="sample" className="mt-4">
                  <div className="p-4 bg-white  leading-7 whitespace-pre-wrap">
                    {generatedEssay}
                  </div>
                  <Button
                    variant="outline"
                    onClick={() =>
                      navigator.clipboard.writeText(generatedEssay)
                    }
                  >
                    Copy to Clipboard
                  </Button>
                </TabsContent>

                <TabsContent value="comparison" className="mt-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h3 className="font-medium mb-2">Your Essay</h3>
                      <div className="p-4 bg-white border rounded-md leading-7 whitespace-pre-wrap h-[500px] overflow-auto">
                        {userEssay}
                      </div>
                    </div>
                    <div>
                      <h3 className="font-medium mb-2">
                        Sample Essay (Band {targetBand})
                      </h3>
                      <div className="p-4 bg-white border rounded-md leading-7 whitespace-pre-wrap h-[500px] overflow-auto">
                        {generatedEssay}
                      </div>
                    </div>
                  </div>
                </TabsContent>
              </Tabs>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
